//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "performance")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub performance_id: i32,
    pub play_id: Option<i32>,
    pub stage_id: Option<i32>,
    pub start_datetime: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::performance_actors::Entity")]
    PerformanceActors,
    #[sea_orm(
        belongs_to = "super::play::Entity",
        from = "Column::PlayId",
        to = "super::play::Column::PlayId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Play,
    #[sea_orm(has_many = "super::poster::Entity")]
    Poster,
    #[sea_orm(
        belongs_to = "super::stage::Entity",
        from = "Column::StageId",
        to = "super::stage::Column::StageId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Stage,
    #[sea_orm(has_many = "super::ticket::Entity")]
    Ticket,
}

impl Related<super::performance_actors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PerformanceActors.def()
    }
}

impl Related<super::play::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Play.def()
    }
}

impl Related<super::poster::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poster.def()
    }
}

impl Related<super::stage::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stage.def()
    }
}

impl Related<super::ticket::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ticket.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
